# Welcome to Serverless!
#
# For full config options, check the docs:
#    docs.serverless.com

service: template

frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: python3.7
  timeout: 5
  # memorySize: 2048
  stage: ${opt:stage, self:custom.defaults.stage}
  region: us-west-2

  apiKeys:
    # auto generate
    - ${self:service}-${self:provider.stage}
    # manual key
    - name: ${self:service}-${self:provider.stage}-share
      value: alfredakimialfredakimi

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::${self:provider.environment.S3_BUCKET}
        - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

  environment:
    SLS_SERVICE: ${self:service}
    SLS_STAGE: ${self:provider.stage}
    LOG_NAME: ${self:custom.name}
    LOG_LEVEL: ${opt:loglevel, env:LOG_LEVEL, self:custom.defaults.log_level}
    S3_BUCKET: ${self:service}-${self:provider.stage}

plugins:
  - serverless-plugin-scripts
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-python-requirements

custom:
  project: demo # only affect subdomain
  name: ${self:service}-${self:provider.stage}

  defaults:
      stage: local
      region: us-west-2
      log_level: info
      # log_level: warning

  basePath:
      prod: ${self:service}
      default: ${self:provider.stage}-${self:service}

  # plugin settings
  # serverless-domain-manager
  customDomain:
    endpointType: regional
    # domainName: ${self:custom.project}.api.bagsprincess.com
    domainName: ${self:custom.project}.api.kanalfred.com
    stage: ${self:provider.stage}
    basePath: ${self:custom.basePath.${self:provider.stage}, self:custom.basePath.default}
    # certificateName: '*.bagsprincess.com'
    createRoute53Record: true

  # serverless-python-requirements
  pythonRequirements:
    pythonBin: python3.7
    # Non-pure-Python modules
    # dockerizePip: non-linux

  # serverless-plugin-scripts
  scripts:
    commands:
      vars: |
        echo "Stage: ${self:provider.stage}"
        echo "Name: ${self:custom.name}"
        echo "Base Endpoint: https://${self:custom.customDomain.domainName}/${self:custom.customDomain.basePath}"

  customEndpoint: "https://${self:custom.customDomain.domainName}/${self:custom.customDomain.basePath}"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# packaging information here - deploy
package:
  include:
    - docs/**
  exclude:
    - bin/**
    - features/**
    - node_modules/**
    - test/**
    - venv/**

# Functions
functions:
  about:
    handler: slstpl/handler.about
    package: {} # sls deploy function fix
    timeout: 5
    memorySize: 128
    events:
        - http:
            method: get
            path: /

  demo:
    handler: slstpl/handler.demo
    package: {} # sls deploy function fix
    events:
        - http:
            method: get
            path: /demo
            private: true

  saves3:
    handler: slstpl/handler.save_s3
    package: {} # sls deploy function fix
    events:
        - http:
            method: get
            path: /s3

  savesnosql:
    handler: slstpl/handler.save_nosql
    package: {} # sls deploy function fix
    events:
        - http:
            method: get
            path: /nosql

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # S3
    slstplS3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}

  Outputs:
    ApiEndpoint:
      Description: API endpoint akan
      Export:
        Name: ${self:provider.stage}:${self:service}:api:endpoint
      Value: ${self:custom.customEndpoint}
